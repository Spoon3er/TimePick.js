<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title> time-pick.js </script>
        </title>
        <link rel="stylesheet" href="./time-pick.css">
    </head>

    <body>
        <div class="row">
            <H1>TimePick</H1><small>Version - 1.1.0</small> <br><br>
            <i>ID based TimePick create with value</i><br><br>
            <input type="text" id="one" value="08:06" />
            <input type="text" id="two" />
            <input type="text" id="three" />
        </div>
        <div class="row">
            <i>Class based TimePick create</i><br><br>
            <input type="text" class="timePicker" value="12:45" />
            <input type="text" id="testing" class="timePicker" />
            <input type="text" class="timePicker theme-light" />
        </div>

        <div class="row">
            <a href="https://www.google.com/search?q=TimePick.js+time+picker+javascript" class="button"
                target="_blank">DOWNLOAD
                TIMEPICK</a>
        </div>
        <div id="logContainer"></div>

        <br><br>

        <i style="position: relative;z-index: 10;">Plugin Developed By : <a href="https://katheesh.js.org"
                target="_blank">KATHEESKUMAR <small>(https://katheesh.js.org)</small></a></i>
        <br><br><br>
        <i>
            <b>Community</b>
            <br>
            TimePick.js is an open source project, shared under an MIT license. All code and discussions are hosted on
            Github.

            Contributions are very welcome â€“ please read these pointers before submitting a bug report or feature
            request.

            If you find this library useful and would like to see further development, consider supporting it.</i>

        <script src="./time-pick.js"></script>
        <script>
            const logContainer = document.getElementById('logContainer');
            logContainer.innerHTML = '';

            function log(message, data) {
                const time = new Date().toLocaleTimeString();
                logContainer.innerHTML += `<b>[${time}] ${message}:</b> ${JSON.stringify(data, null, 2)}\n`;
                logContainer.scrollTop = logContainer.scrollHeight;
            }

            var timepickerOne = new TimePick('#one');
            timepickerOne.on('change', (data) => {
                log('SinglePicker ONE data', data);
                log('SinglePicker ONE vars', timepickerOne.getValue());
            });
            timepickerOne.on('dismiss', (data) => {
                log('SinglePicker ONE dismiss', data);
            });
            timepickerOne.on('show', (data) => {
                log('SinglePicker ONE show', data);
            });

            var timepickerTwo = new TimePick('#two');
            timepickerTwo.on('change', (data) => {
                log('SinglePicker TWO data', data);
                log('SinglePicker TWO vars', timepickerTwo.getValue());
            });
            timepickerTwo.on('dismiss', (data) => {
                log('SinglePicker TWO dismiss', data);
            });
            timepickerTwo.on('show', (data) => {
                log('SinglePicker TWO show', data);
            });

            var timepickerThree = new TimePick('#three');
            timepickerThree.on('change', (data) => {
                log('SinglePicker THREE data', data);
                log('SinglePicker THREE vars', timepickerThree.getValue());
            });
            timepickerThree.on('dismiss', (data) => {
                log('SinglePicker THREE dismiss', data);
            });
            timepickerThree.on('show', (data) => {
                log('SinglePicker THREE show', data);
            });

            const multiPicker = new TimePick('.timePicker');
            log('MultiPicker', multiPicker.getAll());

            multiPicker.instances.forEach((instance, id) => {
                log(`MultiPicker ${id}`, instance.getValue());
            });

            multiPicker.on('change', (instance) => {
                log('MultiPicker data', instance);
            });
            multiPicker.on('dismiss', (instance) => {
                log('MultiPicker dismiss', instance);
            });
            multiPicker.on('show', (instance) => {
                log('MultiPicker show', instance);
            });

            log('MultiPicker: getValue("testing")', multiPicker.getValue('testing'));

            // Instance logs
            log('SinglePicker ONE', timepickerOne.getValue());
            log('SinglePicker TWO', timepickerTwo.getValue());
            log('SinglePicker THREE', timepickerThree.getValue())
        </script>
    </body>

</html>
